(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{472:function(t,n,a){"use strict";a.r(n);var s=a(25),_=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、算法"}},[t._v("#")]),t._v(" 一、算法")]),t._v(" "),a("h3",{attrs:{id:"_1、衡量算法的好坏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、衡量算法的好坏"}},[t._v("#")]),t._v(" 1、衡量算法的好坏")]),t._v(" "),a("ol",[a("li",[t._v("时间复杂度 (运行时间长短)")]),t._v(" "),a("li",[t._v("空间复杂度 (占用空间大小)")])]),t._v(" "),a("h3",{attrs:{id:"_2、算法的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、算法的应用"}},[t._v("#")]),t._v(" 2、算法的应用")]),t._v(" "),a("ul",[a("li",[t._v("运算")]),t._v(" "),a("li",[t._v("查找")]),t._v(" "),a("li",[t._v("排序")]),t._v(" "),a("li",[t._v("最优决策")])]),t._v(" "),a("h2",{attrs:{id:"二、数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、数据结构"}},[t._v("#")]),t._v(" 二、数据结构")]),t._v(" "),a("ul",[a("li",[t._v("线性结构")])]),t._v(" "),a("blockquote",[a("p",[t._v("如 数组、链表，以及衍生的的栈、队列、哈希表")])]),t._v(" "),a("ul",[a("li",[t._v("树")])]),t._v(" "),a("blockquote",[a("p",[t._v("如 最经典的二叉树")])]),t._v(" "),a("ul",[a("li",[t._v("图")]),t._v(" "),a("li",[t._v("其他数据结构")])]),t._v(" "),a("blockquote",[a("p",[t._v("如 跳表、哈希链表、位图")])]),t._v(" "),a("h2",{attrs:{id:"三、时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、时间复杂度"}},[t._v("#")]),t._v(" 三、时间复杂度")]),t._v(" "),a("h4",{attrs:{id:"_1、介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、介绍"}},[t._v("#")]),t._v(" 1、介绍")]),t._v(" "),a("p",[t._v("时间复杂度")]),t._v(" "),a("blockquote",[a("p",[t._v("即运行时间的长短，每个问题都可以转化为一个未知函数T(n)，问题的规模是参数n，时间复杂度即该函数的解。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("假设问题规模为n,则函数T(n)表示程序基本操作的执行次数。\n问题：有一个长10厘米的面包，小明每3分钟吃1厘米，请问小明多久吃完？\n答：10/1 * 3 = 15分钟")]),t._v(" "),a("p",[t._v("如果面包长度是n厘米，则\nn/1 * 3 = 3n\n即\nT(n) = 3n 执行次数是线性的")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下3个输出语句代表函数的常量3")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2、大0表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、大0表示法"}},[t._v("#")]),t._v(" 2、大0表示法")]),t._v(" "),a("p",[t._v("渐进时间复杂度")]),t._v(" "),a("blockquote",[a("p",[t._v("官方定义：若存在函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数， 则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n))，称为O(f(n))，O为算法的渐进时间 复杂度，简称为时间复杂度。")])]),t._v(" "),a("p",[t._v("因为渐进时间复杂度用大写O来表示，所以也被称为大O表示法。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("如何推导时间复杂度,有以下规则")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("如果运行时间是常数量级，则用常数1表示")]),t._v(" "),a("li",[t._v("只保留时间函数中的最高阶项")]),t._v(" "),a("li",[t._v("如果最高阶项存在，则省去最高阶项前面的系数")])])]),t._v(" "),a("p",[t._v("例如")]),t._v(" "),a("ol",[a("li",[t._v("T(n) = 3n")])]),t._v(" "),a("blockquote",[a("p",[t._v("可利用第3个规则，最高项为3n,省去3，则转化的时间复杂度为 T(n) = O(n);\n"),a("img",{attrs:{src:t.$withBase("/algorithm/3n函数.png"),alt:"3n函数"}})])]),t._v(" "),a("p",[t._v("2.T(n) = 5logn")]),t._v(" "),a("blockquote",[a("p",[t._v("最高阶项为5logn,省去系数5，则转化的时间复杂度为 T(n) = O(logn)\n"),a("img",{attrs:{src:t.$withBase("/algorithm/logN函数.png"),alt:"logN函数"}})])]),t._v(" "),a("p",[t._v("3.T(n) = 2")]),t._v(" "),a("blockquote",[a("p",[t._v("只有常数量级，则转化的时间复杂度为：\nT(n) =O(1)。\n"),a("img",{attrs:{src:t.$withBase("/algorithm/常数函数.png"),alt:"常数函数"}})])]),t._v(" "),a("p",[t._v("4.T(n) = 0.5n2+ 0.5n")]),t._v(" "),a("blockquote",[a("p",[t._v("最高阶项为0.5n2，省去系数0.5，则转化的时间复杂度为：T(n) =O(n2)\n"),a("img",{attrs:{src:t.$withBase("/algorithm/n的平方函数.png"),alt:"n的平方函数"}})])]),t._v(" "),a("p",[t._v("当n的取值足够大时，不难得出下面的结论：\nO(1)<O(logn)<O(n)<O(nlogn)<O(n2)")]),t._v(" "),a("p",[t._v("除了上述4个场景，还有许多不同形式的时间复杂度，例如： O(nlogn)、O(n3)、O(mn)、O(2n)、O(n!)")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("时间复杂度的差异")]),t._v(" "),a("blockquote",[a("p",[t._v("不同算法的时间复杂度对比要看n的规模，即函数的斜率，斜率越大算法越差。")])]),t._v(" "),a("h2",{attrs:{id:"四、空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、空间复杂度"}},[t._v("#")]),t._v(" 四、空间复杂度")]),t._v(" "),a("p",[t._v("空间复杂度")]),t._v(" "),a("blockquote",[a("p",[t._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，同样使用了大O表示法")])]),t._v(" "),a("p",[t._v("程序占用空间大小的计算公式记作S(n)=O(f(n))，其中n为问题的规模，f(n)为算法所占存储空间的函数。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("常见的空间复杂度的几种情形")]),t._v(" "),a("ul",[a("li",[t._v("常量空间 O(1)")])]),t._v(" "),a("blockquote",[a("p",[t._v("算法的存储空间大小固定，和输入规模没有直接的关系时")])]),t._v(" "),a("ul",[a("li",[t._v("线性空间 O(n)")])]),t._v(" "),a("blockquote",[a("p",[t._v("当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模n成正比时，空间复杂度记作O(n)")])]),t._v(" "),a("ul",[a("li",[t._v("二维空间 O(n^2)")])]),t._v(" "),a("blockquote",[a("p",[t._v("当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模n成正比时，空间复杂度记作O(n2)")])]),t._v(" "),a("ul",[a("li",[t._v("递归空间 O(n) n为递归的深度")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("虽然递归代码中并没有显式地声明变量或集合，但是计算机在执行程序时，会专门分配一块内存，用来存储“方法调用栈”。")]),t._v(" "),a("li",[t._v("“方法调用栈”包括进栈和出栈两个行为。 当进入一个新方法时，执行入栈操作，把调用的方法和参数信息压入栈中。 当方法返回时，执行出栈操作，把调用的方法和参数信息从栈中弹出。")]),t._v(" "),a("li",[t._v("执行递归操作所需要的内存空间和递归 的深度成正比。纯粹的递归操作的空间复杂度也是线性的，如果递归的深度是n，那么空间复杂度就是O(n)。")])])]),t._v(" "),a("h2",{attrs:{id:"五、时间复杂度和空间复杂度的取舍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、时间复杂度和空间复杂度的取舍"}},[t._v("#")]),t._v(" 五、时间复杂度和空间复杂度的取舍")]),t._v(" "),a("p",[t._v("如果空间重要：时间换空间\n如果时间重要：空间换时间")]),t._v(" "),a("p",[t._v("大多数时候，时间复杂度更为重要一些，宁可多分配一些内存空间，也要提升程序的执行速度。")]),t._v(" "),a("p",[a("strong",[t._v("参考：漫画算法-小灰的算法之旅")])])])}),[],!1,null,null,null);n.default=_.exports}}]);